// Implementation file for parser generated by fsyacc
module FsLexYacc.FsYacc.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "FsYacc/fsyaccpars.fsy"

(* (c) Microsoft Corporation 2005-2008.  *)

// FsLexYacc.FsYacc.Parser

open FsLexYacc.FsYacc
open FsLexYacc.FsYacc.AST
open TextUtils

#nowarn "62" // This construct is for ML compatibility
#nowarn "64" // Turn off warnings that type variables used in production annotations are instantiated to concrete type"


# 20 "FsYacc/fsyaccpars.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | BAR
  | PERCENT_PERCENT
  | START
  | LEFT
  | RIGHT
  | NONASSOC
  | LESS
  | GREATER
  | COLON
  | PREC
  | SEMI
  | EOF
  | ERROR
  | HEADER of (AST.Code)
  | CODE of (AST.Code)
  | TOKEN of (AST.Identifier option)
  | IDENT of (AST.Identifier)
  | TYPE of (AST.Identifier)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_BAR
    | TOKEN_PERCENT_PERCENT
    | TOKEN_START
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_NONASSOC
    | TOKEN_LESS
    | TOKEN_GREATER
    | TOKEN_COLON
    | TOKEN_PREC
    | TOKEN_SEMI
    | TOKEN_EOF
    | TOKEN_ERROR
    | TOKEN_HEADER
    | TOKEN_CODE
    | TOKEN_TOKEN
    | TOKEN_IDENT
    | TOKEN_TYPE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startspec
    | NONTERM_spec
    | NONTERM_headeropt
    | NONTERM_decls
    | NONTERM_decl
    | NONTERM_idents
    | NONTERM_rules
    | NONTERM_rule
    | NONTERM_optbar
    | NONTERM_optsemi
    | NONTERM_clauses
    | NONTERM_clause
    | NONTERM_syms
    | NONTERM_optprec
    | NONTERM_clauseRecovery

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | BAR  -> 0 
  | PERCENT_PERCENT  -> 1 
  | START  -> 2 
  | LEFT  -> 3 
  | RIGHT  -> 4 
  | NONASSOC  -> 5 
  | LESS  -> 6 
  | GREATER  -> 7 
  | COLON  -> 8 
  | PREC  -> 9 
  | SEMI  -> 10 
  | EOF  -> 11 
  | ERROR  -> 12 
  | HEADER _ -> 13 
  | CODE _ -> 14 
  | TOKEN _ -> 15 
  | IDENT _ -> 16 
  | TYPE _ -> 17 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_BAR 
  | 1 -> TOKEN_PERCENT_PERCENT 
  | 2 -> TOKEN_START 
  | 3 -> TOKEN_LEFT 
  | 4 -> TOKEN_RIGHT 
  | 5 -> TOKEN_NONASSOC 
  | 6 -> TOKEN_LESS 
  | 7 -> TOKEN_GREATER 
  | 8 -> TOKEN_COLON 
  | 9 -> TOKEN_PREC 
  | 10 -> TOKEN_SEMI 
  | 11 -> TOKEN_EOF 
  | 12 -> TOKEN_ERROR 
  | 13 -> TOKEN_HEADER 
  | 14 -> TOKEN_CODE 
  | 15 -> TOKEN_TOKEN 
  | 16 -> TOKEN_IDENT 
  | 17 -> TOKEN_TYPE 
  | 20 -> TOKEN_end_of_input
  | 18 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startspec 
    | 1 -> NONTERM_spec 
    | 2 -> NONTERM_headeropt 
    | 3 -> NONTERM_headeropt 
    | 4 -> NONTERM_decls 
    | 5 -> NONTERM_decls 
    | 6 -> NONTERM_decl 
    | 7 -> NONTERM_decl 
    | 8 -> NONTERM_decl 
    | 9 -> NONTERM_decl 
    | 10 -> NONTERM_decl 
    | 11 -> NONTERM_decl 
    | 12 -> NONTERM_idents 
    | 13 -> NONTERM_idents 
    | 14 -> NONTERM_rules 
    | 15 -> NONTERM_rules 
    | 16 -> NONTERM_rule 
    | 17 -> NONTERM_optbar 
    | 18 -> NONTERM_optbar 
    | 19 -> NONTERM_optsemi 
    | 20 -> NONTERM_optsemi 
    | 21 -> NONTERM_clauses 
    | 22 -> NONTERM_clauses 
    | 23 -> NONTERM_clause 
    | 24 -> NONTERM_clause 
    | 25 -> NONTERM_syms 
    | 26 -> NONTERM_syms 
    | 27 -> NONTERM_syms 
    | 28 -> NONTERM_optprec 
    | 29 -> NONTERM_optprec 
    | 30 -> NONTERM_clauseRecovery 
    | 31 -> NONTERM_clauseRecovery 
    | 32 -> NONTERM_clauseRecovery 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 20 
let _fsyacc_tagOfErrorTerminal = 18

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | BAR  -> "BAR" 
  | PERCENT_PERCENT  -> "PERCENT_PERCENT" 
  | START  -> "START" 
  | LEFT  -> "LEFT" 
  | RIGHT  -> "RIGHT" 
  | NONASSOC  -> "NONASSOC" 
  | LESS  -> "LESS" 
  | GREATER  -> "GREATER" 
  | COLON  -> "COLON" 
  | PREC  -> "PREC" 
  | SEMI  -> "SEMI" 
  | EOF  -> "EOF" 
  | ERROR  -> "ERROR" 
  | HEADER _ -> "HEADER" 
  | CODE _ -> "CODE" 
  | TOKEN _ -> "TOKEN" 
  | IDENT _ -> "IDENT" 
  | TYPE _ -> "TYPE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | BAR  -> (null : System.Object) 
  | PERCENT_PERCENT  -> (null : System.Object) 
  | START  -> (null : System.Object) 
  | LEFT  -> (null : System.Object) 
  | RIGHT  -> (null : System.Object) 
  | NONASSOC  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | PREC  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ERROR  -> (null : System.Object) 
  | HEADER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOKEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;2us;65535us;2us;3us;7us;8us;2us;65535us;2us;7us;7us;7us;7us;65535us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;2us;65535us;4us;5us;23us;24us;2us;65535us;4us;23us;23us;23us;1us;65535us;26us;27us;1us;65535us;28us;29us;2us;65535us;27us;28us;33us;34us;2us;65535us;27us;32us;33us;32us;4us;65535us;27us;35us;33us;35us;39us;40us;41us;42us;1us;65535us;35us;36us;1us;65535us;36us;38us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;8us;11us;19us;22us;25us;27us;29us;32us;35us;40us;42us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;1us;5us;1us;5us;1us;6us;1us;6us;1us;7us;1us;7us;1us;8us;1us;8us;1us;9us;1us;9us;1us;10us;1us;10us;1us;11us;1us;11us;1us;12us;1us;12us;2us;14us;15us;1us;14us;1us;16us;1us;16us;1us;16us;1us;16us;1us;16us;1us;18us;1us;20us;2us;21us;22us;1us;21us;1us;21us;2us;23us;24us;2us;23us;24us;1us;23us;1us;24us;1us;25us;1us;25us;1us;26us;1us;26us;1us;29us;1us;29us;1us;31us;1us;32us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;24us;26us;28us;30us;32us;34us;36us;38us;40us;42us;44us;46us;49us;51us;53us;55us;57us;59us;61us;63us;65us;68us;70us;72us;75us;78us;80us;82us;84us;86us;88us;90us;92us;94us;96us;|]
let _fsyacc_action_rows = 47
let _fsyacc_actionTableElements = [|1us;16387us;13us;6us;0us;49152us;6us;16388us;2us;13us;3us;15us;4us;17us;5us;19us;15us;9us;17us;11us;1us;32768us;1us;4us;1us;32768us;16us;25us;0us;16385us;0us;16386us;6us;16388us;2us;13us;3us;15us;4us;17us;5us;19us;15us;9us;17us;11us;0us;16389us;1us;16397us;16us;21us;0us;16390us;1us;16397us;16us;21us;0us;16391us;1us;16397us;16us;21us;0us;16392us;1us;16397us;16us;21us;0us;16393us;1us;16397us;16us;21us;0us;16394us;1us;16397us;16us;21us;0us;16395us;1us;16397us;16us;21us;0us;16396us;1us;16399us;16us;25us;0us;16398us;1us;32768us;8us;26us;1us;16401us;0us;30us;2us;16411us;12us;41us;16us;39us;1us;16403us;10us;31us;0us;16400us;0us;16402us;0us;16404us;1us;16406us;0us;33us;2us;16411us;12us;41us;16us;39us;0us;16405us;1us;16412us;9us;43us;3us;16414us;11us;46us;14us;37us;16us;45us;0us;16407us;0us;16408us;2us;16411us;12us;41us;16us;39us;0us;16409us;2us;16411us;12us;41us;16us;39us;0us;16410us;1us;32768us;16us;44us;0us;16413us;0us;16415us;0us;16416us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;10us;12us;14us;15us;16us;23us;24us;26us;27us;29us;30us;32us;33us;35us;36us;38us;39us;41us;42us;44us;45us;47us;48us;50us;52us;55us;57us;58us;59us;60us;62us;65us;66us;68us;72us;73us;74us;77us;78us;81us;82us;84us;85us;86us;|]
let _fsyacc_reductionSymbolCounts = [|1us;4us;1us;0us;0us;2us;2us;2us;2us;2us;2us;2us;2us;0us;2us;1us;5us;0us;1us;0us;1us;3us;1us;3us;3us;2us;2us;0us;0us;2us;0us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;4us;4us;4us;4us;5us;5us;6us;6us;7us;8us;8us;9us;9us;10us;10us;11us;11us;12us;12us;12us;13us;13us;14us;14us;14us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;65535us;16385us;16386us;65535us;16389us;65535us;16390us;65535us;16391us;65535us;16392us;65535us;16393us;65535us;16394us;65535us;16395us;65535us;16396us;65535us;16398us;65535us;65535us;65535us;65535us;16400us;16402us;16404us;65535us;65535us;16405us;65535us;65535us;16407us;16408us;65535us;16409us;65535us;16410us;65535us;16413us;16415us;16416us;|]
let _fsyacc_reductions = lazy [|
# 223 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.ParserSpec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startspec));
# 232 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_headeropt in
            let _2 = parseState.GetInput(2) :?> 'gentype_decls in
            let _4 = parseState.GetInput(4) :?> 'gentype_rules in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "FsYacc/fsyaccpars.fsy"
                           List.foldBack (fun f x -> f x) _2 { Header=_1;Tokens=[];Types=[];Associativities=[];StartSymbols=[];Rules=_4 } 
                   )
# 26 "FsYacc/fsyaccpars.fsy"
                 : AST.ParserSpec));
# 245 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Code in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "FsYacc/fsyaccpars.fsy"
                              _1 
                   )
# 30 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_headeropt));
# 256 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "FsYacc/fsyaccpars.fsy"
                             "", parserRangeToLspRange parseState.ResultRange
                   )
# 32 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_headeropt));
# 266 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "FsYacc/fsyaccpars.fsy"
                           [] 
                   )
# 35 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_decls));
# 276 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_decl in
            let _2 = parseState.GetInput(2) :?> 'gentype_decls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "FsYacc/fsyaccpars.fsy"
                                      _1 :: _2 
                   )
# 36 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_decls));
# 288 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Identifier option in
            let _2 = parseState.GetInput(2) :?> 'gentype_idents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "FsYacc/fsyaccpars.fsy"
                                        (fun x -> {x with Tokens = x.Tokens @ (List.map (fun x -> (x,_1)) _2)}) 
                   )
# 39 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_decl));
# 300 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Identifier in
            let _2 = parseState.GetInput(2) :?> 'gentype_idents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "FsYacc/fsyaccpars.fsy"
                                         (fun x -> {x with Types = x.Types @ (List.map (fun x -> (x,_1)) _2)} ) 
                   )
# 40 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_decl));
# 312 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_idents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "FsYacc/fsyaccpars.fsy"
                                          (fun x -> {x with StartSymbols = x.StartSymbols @ _2} ) 
                   )
# 41 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_decl));
# 323 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_idents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "FsYacc/fsyaccpars.fsy"
                                         (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,LeftAssoc)) _2)]} ) 
                   )
# 42 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_decl));
# 334 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_idents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "FsYacc/fsyaccpars.fsy"
                                          (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,RightAssoc)) _2)]} ) 
                   )
# 43 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_decl));
# 345 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_idents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "FsYacc/fsyaccpars.fsy"
                                             (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,NonAssoc)) _2)]} ) 
                   )
# 44 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_decl));
# 356 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Identifier in
            let _2 = parseState.GetInput(2) :?> 'gentype_idents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "FsYacc/fsyaccpars.fsy"
                                            _1 :: _2 
                   )
# 46 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_idents));
# 368 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "FsYacc/fsyaccpars.fsy"
                                                           [] 
                   )
# 46 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_idents));
# 378 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rule in
            let _2 = parseState.GetInput(2) :?> 'gentype_rules in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "FsYacc/fsyaccpars.fsy"
                                         _1 :: _2 
                   )
# 47 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_rules));
# 390 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rule in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "FsYacc/fsyaccpars.fsy"
                                                             [_1] 
                   )
# 47 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_rules));
# 401 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Identifier in
            let _3 = parseState.GetInput(3) :?> 'gentype_optbar in
            let _4 = parseState.GetInput(4) :?> 'gentype_clauses in
            let _5 = parseState.GetInput(5) :?> 'gentype_optsemi in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "FsYacc/fsyaccpars.fsy"
                                                                (_1,_4, parserRangeToLspRange parseState.ResultRange) 
                   )
# 48 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_rule));
# 415 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "FsYacc/fsyaccpars.fsy"
                               
                   )
# 49 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_optbar));
# 425 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "FsYacc/fsyaccpars.fsy"
                                         
                   )
# 49 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_optbar));
# 435 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "FsYacc/fsyaccpars.fsy"
                                
                   )
# 50 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_optsemi));
# 445 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "FsYacc/fsyaccpars.fsy"
                                           
                   )
# 50 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_optsemi));
# 455 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_clause in
            let _3 = parseState.GetInput(3) :?> 'gentype_clauses in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "FsYacc/fsyaccpars.fsy"
                                                  _1 :: _3 
                   )
# 51 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_clauses));
# 467 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_clause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "FsYacc/fsyaccpars.fsy"
                                                                        [_1] 
                   )
# 51 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_clauses));
# 478 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_syms in
            let _2 = parseState.GetInput(2) :?> 'gentype_optprec in
            let _3 = parseState.GetInput(3) :?> AST.Code in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "FsYacc/fsyaccpars.fsy"
                                             Rule(_1,_2,Some _3, parserRangeToLspRange parseState.ResultRange) 
                   )
# 53 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_clause));
# 491 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_syms in
            let _2 = parseState.GetInput(2) :?> 'gentype_optprec in
            let _3 = parseState.GetInput(3) :?> 'gentype_clauseRecovery in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "FsYacc/fsyaccpars.fsy"
                                                       Rule(_1,_2,None, parserRangeToLspRange parseState.ResultRange) 
                   )
# 54 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_clause));
# 504 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Identifier in
            let _2 = parseState.GetInput(2) :?> 'gentype_syms in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FsYacc/fsyaccpars.fsy"
                                        _1 :: _2 
                   )
# 55 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_syms));
# 516 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_syms in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FsYacc/fsyaccpars.fsy"
                                                                  ("error", emptyRange) :: _2 
                   )
# 55 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_syms));
# 527 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FsYacc/fsyaccpars.fsy"
                                                                                                    [] 
                   )
# 55 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_syms));
# 537 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "FsYacc/fsyaccpars.fsy"
                                None 
                   )
# 56 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_optprec));
# 547 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.Identifier in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "FsYacc/fsyaccpars.fsy"
                                                      Some _2 
                   )
# 56 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_optprec));
# 558 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "FsYacc/fsyaccpars.fsy"
                        
                   )
# 59 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_clauseRecovery));
# 568 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Identifier in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "FsYacc/fsyaccpars.fsy"
                              
                   )
# 60 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_clauseRecovery));
# 579 "FsYacc/fsyaccpars.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FsYacc/fsyaccpars.fsy"
                            
                   )
# 61 "FsYacc/fsyaccpars.fsy"
                 : 'gentype_clauseRecovery));
|]
# 590 "FsYacc/fsyaccpars.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 21;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let spec lexer lexbuf : AST.ParserSpec =
    engine lexer lexbuf 0 :?> _
