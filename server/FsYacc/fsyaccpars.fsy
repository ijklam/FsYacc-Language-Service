%{
(* (c) Microsoft Corporation 2005-2008.  *)

// FsLexYacc.FsYacc.Parser

open FsLexYacc.FsYacc
open FsLexYacc.FsYacc.AST
open TextUtils

#nowarn "62" // This construct is for ML compatibility
#nowarn "64" // Turn off warnings that type variables used in production annotations are instantiated to concrete type"

%} 

%type <AST.ParserSpec> spec
%token <AST.Identifier>  IDENT TYPE
%token <AST.Identifier option> TOKEN
%token <AST.Code> HEADER CODE 
%token BAR PERCENT_PERCENT  START LEFT RIGHT NONASSOC LESS GREATER COLON PREC SEMI EOF ERROR
%start spec
%left BAR
%%      

spec: 
    headeropt decls PERCENT_PERCENT rules 
    { List.foldBack (fun f x -> f x) $2 { Header=$1;Tokens=[];Types=[];Associativities=[];StartSymbols=[];Rules=$4 } }

headeropt: 
  | HEADER 
       { $1 } 
  | 
      { "", parserRangeToLspRange parseState.ResultRange}

decls:  
    { [] } 
  | decl decls { $1 :: $2 }

decl: 
    TOKEN idents { (fun x -> {x with Tokens = x.Tokens @ (List.map (fun x -> (x,$1)) $2)}) }
  | TYPE idents   { (fun x -> {x with Types = x.Types @ (List.map (fun x -> (x,$1)) $2)} ) } 
  | START idents   { (fun x -> {x with StartSymbols = x.StartSymbols @ $2} ) }
  | LEFT idents   { (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,LeftAssoc)) $2)]} ) }
  | RIGHT idents   { (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,RightAssoc)) $2)]} ) }
  | NONASSOC idents   { (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,NonAssoc)) $2)]} ) }

idents: IDENT idents { $1 :: $2 } | { [] }
rules: rule rules { $1 :: $2 } | rule { [$1] }
rule: IDENT COLON optbar clauses optsemi { ($1,$4, parserRangeToLspRange parseState.ResultRange) }
optbar: { } | BAR { }
optsemi: { } | SEMI { }
clauses: clause BAR clauses {$1 :: $3 } | clause { [$1] }
clause: 
  | syms optprec CODE { Rule($1,$2,Some $3, parserRangeToLspRange parseState.ResultRange) }
  | syms optprec clauseRecovery { Rule($1,$2,None, parserRangeToLspRange parseState.ResultRange) }
syms: IDENT syms { $1 :: $2 } | ERROR syms { ("error", emptyRange) :: $2 } | { [] }
optprec: { None } | PREC IDENT { Some $2 }

clauseRecovery:
| {}
| IDENT {}
| EOF {}